// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SqliteDataWrite;

#nullable disable

namespace SqliteDataWrite.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    partial class WriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.EventAggregate.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<int>("maxGuests")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MaxGuests");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Title");

                    b.ComplexProperty<Dictionary<string, object>>("status", "VIAEventAssociation.Core.Domain.Aggregates.EventAggregate.Event.status#EventStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("_displayName")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("StatusName");

                            b1.Property<int>("_value")
                                .HasColumnType("INTEGER")
                                .HasColumnName("StatusValue");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("visibility", "VIAEventAssociation.Core.Domain.Aggregates.EventAggregate.Event.visibility#EventVisibility", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("_displayName")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("VisibilityName");

                            b1.Property<int>("_value")
                                .HasColumnType("INTEGER")
                                .HasColumnName("VisibilityValue");
                        });

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.EventAggregate.Invite.Invite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("inviteStatus", "VIAEventAssociation.Core.Domain.Aggregates.EventAggregate.Invite.Invite.inviteStatus#InviteStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("_displayName")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("StatusDisplayName");

                            b1.Property<int>("_value")
                                .HasColumnType("INTEGER")
                                .HasColumnName("StatusValue");
                        });

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Invite");
                });

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.EventAggregate.Request.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("assignedGuestId")
                        .HasColumnType("TEXT");

                    b.Property<string>("reason")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Reason");

                    b.ComplexProperty<Dictionary<string, object>>("requestStatus", "VIAEventAssociation.Core.Domain.Aggregates.EventAggregate.Request.Request.requestStatus#RequestStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("_displayName")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("StatusDisplayName");

                            b1.Property<int>("_value")
                                .HasColumnType("INTEGER")
                                .HasColumnName("StatusValue");
                        });

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("assignedGuestId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.GuestAggregate.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Email");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FirstName");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("LastName");

                    b.Property<Uri>("profilePictureUrl")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ProfilePictureUrl");

                    b.HasKey("Id");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.EventAggregate.Event", b =>
                {
                    b.OwnsOne("VIAEventAssociation.Core.Domain.Aggregates.EventAggregate.GuestList.GuestList", "guestList", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("EventId")
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("EventId")
                                .IsUnique();

                            b1.ToTable("GuestLists", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("EventId");

                            b1.OwnsMany("VIAEventAssociation.Core.Domain.Aggregates.GuestAggregate.ValueObjects.GuestId", "guests", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("INTEGER");

                                    b2.Property<Guid>("GuestListId")
                                        .HasColumnType("TEXT");

                                    b2.Property<Guid>("Value")
                                        .HasColumnType("TEXT")
                                        .HasColumnName("GuestId");

                                    b2.HasKey("Id");

                                    b2.HasIndex("GuestListId");

                                    b2.ToTable("GuestListEntries", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("GuestListId");
                                });

                            b1.Navigation("guests");
                        });

                    b.OwnsOne("VIAEventAssociation.Core.Domain.Aggregates.EventAggregate.ValueObjects.EventTime", "eventTime", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("TEXT")
                                .HasColumnName("EndTime");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("TEXT")
                                .HasColumnName("StartTime");

                            b1.HasKey("EventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.Navigation("eventTime");

                    b.Navigation("guestList");
                });

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.EventAggregate.Invite.Invite", b =>
                {
                    b.HasOne("VIAEventAssociation.Core.Domain.Aggregates.EventAggregate.Event", null)
                        .WithMany("invites")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.EventAggregate.Request.Request", b =>
                {
                    b.HasOne("VIAEventAssociation.Core.Domain.Aggregates.EventAggregate.Event", null)
                        .WithMany("requests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VIAEventAssociation.Core.Domain.Aggregates.GuestAggregate.Guest", null)
                        .WithMany()
                        .HasForeignKey("assignedGuestId");
                });

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.EventAggregate.Event", b =>
                {
                    b.Navigation("invites");

                    b.Navigation("requests");
                });
#pragma warning restore 612, 618
        }
    }
}
